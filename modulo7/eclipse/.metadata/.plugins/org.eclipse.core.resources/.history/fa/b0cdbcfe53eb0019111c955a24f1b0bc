/*
 * matriz.cpp
 *
 *  Created on: 10 oct. 2019
 *      Author: antonio
 */

#include "Matriz.h"
#include "Excepcion.h"
#include <iostream>

Matriz::Matriz(int filas, int col, int val) {

	this->filas=filas;
	this->col=col;

	//Primero crear el array de fuera:
	//Hazme [filas] punteros unique de tipo int []
	this->datos=std::make_unique<std::unique_ptr<int []>[]>(this->filas);

	for(int i=0;i<filas;i++)
		this->datos[i]=std::make_unique<int []>(this->col);

	for(int i=0;i<filas;i++)
		for(int j=0;j<col;j++)
			this->datos[i][j]=val;
}

bool Matriz::checkSuma(const Matriz& m) {
	return this->filas==m.filas && this->col==m.col;
}

bool Matriz::checkMul(const Matriz& m) {
	return this->col==m.filas;
}

void Matriz::set(int fila, int col, int val) {
	this->datos[fila][col]=val;
}

int Matriz::get(int fila, int col) {
	if(fila >= 0 && fila < this->filas && col>=0 && col < this->col){
		return this->datos[fila][col];
	}else{
		char s[50];
		std::sprintf(s,"%d %d", fila, col);
		throw Excepcion("Fuera de rango: "+std::string(s));
	}
}

Matriz Matriz::operator +(const Matriz& m) {
	Matriz aux(this->filas,this->col);
	if(checkSuma(m)){
		for(int i=0;i<this->filas;i++)
			for(int j=0;j<this->col;j++)
				aux.datos[i][j]=this->datos[i][j]+m.datos[i][j];
		return aux;
	}else{
		//Lanzar excepcion
		throw Excepcion("Las matrices no son compatibles para realizar la suma ");
	}
}

void Matriz::imprimir() {
	for(int i=0;i<this->filas;i++){
		for(int j=0;j<this->col;j++){
			std::cout << this->datos[i][j] << " ";
		}
		std::cout << "\n";
	}

}


Matriz Matriz::operator *(const Matriz& m) {
	Matriz aux(this->filas,this->col);
	int aux2,i,j;

	if(checkMul(m)){
		for(i=0;i<this->filas;i++){
			for(j=0;j<this->col;j++){
				aux2=0;
				for(int k=0;k<this->filas;k++){
					aux2=aux2+(this->datos[i][k]*m.datos[k][j]);
					std::cout << aux2 << std::endl;
				}
			aux.datos[i][j]=aux2;
			}
		}
		return aux;

	}else{
		//Lanzar excepcion
		throw Excepcion("Las matrices no son compatibles para realizar la multiplicacion ");
	}
}



std::ostream & operator << (std::ostream & os, const Matriz & m){
	for(int i=0;i<m.filas;i++){
		for(int j=0;j<m.col;j++)
			std::cout << m.datos[i][j] << " ";
		std::cout << "\n";
	}
	return os;
}

Matriz::~Matriz() {
	// TODO Auto-generated destructor stub
}

